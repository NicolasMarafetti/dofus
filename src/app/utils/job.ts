import { createItemFromApi, getItemFromApi, getItemMinPrice, getItemRecipe, getItemsWithRecipeFromApi, ItemRecipesResponse } from "./item";
import { JobComplete } from "../interfaces/job";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const calculateCraftCost = (job: JobComplete) => {
    let craftCost = 0;

    for (const ingredient of job.ingredients) {
        const itemMinPrice = getItemMinPrice(ingredient.item);

        craftCost += itemMinPrice * ingredient.quantity;
    }

    return craftCost;
}

export const calculateJobBenefice = (job: JobComplete) => {
    const craftCost = calculateCraftCost(job);
    const itemMinPrice = getItemMinPrice(job.resultItem);

    return itemMinPrice - craftCost;
}

/**
 * Cr√©e les ingr√©dients pour un m√©tier, en v√©rifiant qu'ils n'existent pas d√©j√†.
 */
export const createJobIngredients = async (jobId: string, recipeData: ItemRecipesResponse) => {
    try {
        console.info(`üõ†Ô∏è D√©but de la cr√©ation des ingr√©dients pour le m√©tier ${jobId}`);

        // √âtape 1 : Cr√©er ou v√©rifier l'existence des objets ingr√©dients
        for (const ingredientId of recipeData.ingredientIds) {
            const existingItem = await prisma.item.findFirst({
                where: { dofusdbId: ingredientId }
            });

            if (!existingItem) {
                console.info(`üì¶ L'objet avec dofusdbId ${ingredientId} n'existe pas. Cr√©ation en cours...`);
                await createItemFromApi(ingredientId, false);
            } else {
                console.info(`‚úÖ L'objet avec dofusdbId ${ingredientId} existe d√©j√†.`);
            }
        }

        // √âtape 2 : Enregistrer les composants du craft
        for (const key in recipeData.ingredientIds) {
            const ingredientId = recipeData.ingredientIds[key];
            const ingredientQuantity = recipeData.quantities[key];

            // Recherche de l'objet (apr√®s potentielle cr√©ation)
            const item = await prisma.item.findFirst({
                where: { dofusdbId: ingredientId }
            });

            if (!item) {
                console.error(`‚ùå Erreur : Impossible de trouver l'objet avec dofusdbId ${ingredientId} apr√®s v√©rification.`);
                continue;
            }

            // V√©rifier si l'ingr√©dient du m√©tier existe d√©j√†
            const existingIngredient = await prisma.jobIngredient.findFirst({
                where: {
                    jobId: jobId,
                    itemId: item.id,
                }
            });

            if (existingIngredient) {
                console.warn(`‚ö†Ô∏è L'ingr√©dient avec itemId ${item.id} et jobId ${jobId} existe d√©j√†. Skipping.`);
                continue;
            }

            // Cr√©er l'ingr√©dient
            await prisma.jobIngredient.create({
                data: {
                    jobId: jobId,
                    itemId: item.id,
                    quantity: ingredientQuantity
                }
            });
            console.info(`‚úÖ Ingr√©dient ajout√© : itemId ${item.id}, quantit√© ${ingredientQuantity}`);
        }

        console.info(`üéØ Cr√©ation des ingr√©dients termin√©e pour le m√©tier ${jobId}`);
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation des ingr√©dients :', error);
    } finally {
        await prisma.$disconnect();
    }
};

export const getMissingJobs = async () => {
    // √âtape 1 : R√©cup√©ration des objets qui n'ont pas de job associ√©.
    const itemsWithoutJob = await prisma.item.findMany({
        where: {
            Job: null,
        },
    });

    // √âtape 2 : Boucle sur chaque objet sans job
    for (const item of itemsWithoutJob) {
        try {
            // √âtape 3 : Appel API pour v√©rifier si l'objet a un job
            const itemResponse = await getItemFromApi(item.dofusdbId);

            if (itemResponse.hasRecipe) {
                console.info(`‚úÖ Job trouv√© pour l'objet ${item.name}`);

                // R√©cup√©ration du craft
                const itemRecipe = await getItemRecipe(item.dofusdbId);

                if (!itemRecipe) {
                    console.info(`‚ùå Aucun craft trouv√© pour l'objet ${item.name}`);
                    continue;
                }

                // √âtape 4 : Mise √† jour ou cr√©ation du Job dans la base de donn√©es
                const savedJob = await prisma.job.upsert({
                    where: { resultItemId: item.id },
                    update: {
                        jobName: itemRecipe.job.name.fr,
                    },
                    create: {
                        resultItemId: item.id,
                        jobName: itemRecipe.job.name.fr,
                    },
                });

                // Cr√©ation des composants
                await createJobIngredients(savedJob.id, itemRecipe);
            } else {
                console.info(`‚ùå Aucun job trouv√© pour l'objet ${item.name}`);
            }
        } catch (error) {
            console.error(`üö® Erreur lors de la r√©cup√©ration du job pour l'objet ${item.name}:`, error);
        }
    }

    console.info('üéØ Synchronisation des jobs termin√©e.');
}

export const repairJobs = async (maxLevelItem: number) => {
    console.info('üõ†Ô∏è D√©but de la r√©paration des crafts...');

    const itemsData = await getItemsWithRecipeFromApi(1, maxLevelItem);

    let repairCount = 0;

    for (const itemData of itemsData) {
        // Recherche de l'objet dans la base de donn√©es
        const item = await prisma.item.findFirst({
            where: { dofusdbId: itemData.dofusdbId }
        });

        // Si l'objet n'existe pas, on le cr√©e (comprenant ses drops, crafts, etc.)
        if (!item) {
            await createItemFromApi(itemData.dofusdbId);
            repairCount++;
            continue;
        }

        // Si l'objet existe, on v√©rifie si le craft existe
        let savedJob = await prisma.job.findFirst({
            where: { resultItemId: item.id }
        });

        const itemRecipe = await getItemRecipe(itemData.dofusdbId);

        if (!itemRecipe) {
            console.info(`‚ùå Aucun craft trouv√© pour l'objet ${item.name}`);
            continue;
        }

        // Si le craft n'existe pas, on le cr√©e
        if (!savedJob) {
            savedJob = await prisma.job.create({
                data: {
                    resultItemId: item.id,
                    jobName: itemRecipe.job.name.fr
                }
            });
        }

        // Puis on cr√©er si besoin les composants du craft, ou sinon on les lie au craft pr√©cedemment cr√©√©
        await createJobIngredients(savedJob.id, itemRecipe);
        repairCount++;
    }

    repairCount++;

    console.info(`üéØ R√©paration termin√©e. ${repairCount} craft(s) corrig√©(s).`);
}
