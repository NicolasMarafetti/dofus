generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Craft {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String          @unique
  level      Int
  profession String // Nouveau champ pour le métier
  resources  CraftResource[]
}

model Drop {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  monsterId String  @db.ObjectId
  monster   Monster @relation(fields: [monsterId], references: [id])
  itemId    String  @db.ObjectId
  item      Item    @relation(fields: [itemId], references: [id])
  dropRate  Float

  @@unique([monsterId, itemId])
}

model Item {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  dofusdbId      Int             @unique
  image          String
  level          Int
  name           String          @unique
  price1         Int? // Prix pour 1 exemplaire (nullable)
  price10        Int? // Prix pour 10 exemplaires (nullable)
  price100       Int? // Prix pour 100 exemplaires (nullable)
  sellMode       String          @default("default") // "default" ou "single_only"
  hasSalesData   Boolean         @default(false) // Indique si des ventes ont déjà été enregistrées
  Job            Job?
  jobIngredients JobIngredient[]
  Drop           Drop[]
}

model Job {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  resultItemId String          @unique @db.ObjectId
  resultItem   Item            @relation(fields: [resultItemId], references: [id])
  jobName      String
  ingredients  JobIngredient[]
}

model JobIngredient {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  jobId    String @db.ObjectId
  job      Job    @relation(fields: [jobId], references: [id])
  itemId   String @db.ObjectId
  item     Item   @relation(fields: [itemId], references: [id])
  quantity Int
}

model Monster {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  monsterDofusdbId Int     @unique
  name             String
  level            Int?
  isDungeonBoss    Boolean @default(false)
  img              String?
  drops            Drop[]
}

model Resource {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String          @unique
  price            Int
  difficultyFactor Float?
  dropRate         Float? // Taux de drop (en %)
  monsterLevel     Int? // Niveau des monstres
  monsterCount     Int? // Nombre de monstres différents dans la zone
  isDungeonBoss    Boolean?        @default(false) // Si c'est un boss de donjon
  CraftResource    CraftResource[]
}

model CraftResource {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity   Int
  craftId    String   @db.ObjectId
  craft      Craft    @relation(fields: [craftId], references: [id])
  resourceId String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id])
}
